#!/usr/bin/env python

import os

import rapidtide.dlfilter as tide_dlfilter

num_pretrain_epochs = 5
num_epochs = 5
excludethresh = 4.0
corrthresh = 0.72
window_size = 128
num_layers = 4
num_filters = 5
kernel_size = 5
dropout_rate = 0.3
dofft = False
nettype = "cnn"
nettype = "convautoencoder"
activation = "relu"
usebadpts = False
countlim = None
readlim = None
readskip = 0
num_units = 128
debug = False
invert = True
startskip = 200
endskip = 100
step = 20
encoding_dim = 16
excludebysubject = False

thiscomputer = os.uname().nodename
print("thiscomputer:", thiscomputer)
if thiscomputer.startswith("bbf-"):
    print("setting up to run on mac")
    thedatadir = "/Users/frederic/Dropbox_PHC/physioconn/output_2025"
elif thiscomputer.startswith("DESKTOP"):
    print("setting up to run on windows bash")
    thedatadir = "/home/frederic/Dropbox/timecourses"
else:
    print("setting up to run on mclean cluster")
    thedatadir = "/data/frederic/physioconn/output_2025"

print(f"will look for input data in {thedatadir}")


if nettype == "cnn":
    thefilter = tide_dlfilter.CNNDLFilter(
        num_epochs=num_epochs,
        startskip=startskip,
        endskip=endskip,
        step=step,
        excludethresh=excludethresh,
        corrthresh=corrthresh,
        excludebysubject=excludebysubject,
        window_size=window_size,
        num_layers=num_layers,
        dropout_rate=dropout_rate,
        usebadpts=usebadpts,
        readlim=readlim,
        readskip=readskip,
        countlim=countlim,
        thedatadir=thedatadir,
        inputfrag="cardfromfmri",
        targetfrag="normpleth",
        namesuffix="normaligned",
        activation=activation,
        num_filters=num_filters,
        kernel_size=kernel_size,
        debug=debug,
    )
elif nettype == "convautoencoder":
    num_filters = 256
    thefilter = tide_dlfilter.ConvAutoencoderDLFilter(
        num_pretrain_epochs=num_pretrain_epochs,
        num_epochs=num_epochs,
        startskip=startskip,
        endskip=endskip,
        step=step,
        excludethresh=excludethresh,
        corrthresh=corrthresh,
        excludebysubject=excludebysubject,
        window_size=window_size,
        num_layers=num_layers,
        dropout_rate=dropout_rate,
        usebadpts=usebadpts,
        readlim=readlim,
        readskip=readskip,
        countlim=countlim,
        thedatadir=thedatadir,
        inputfrag="cardfromfmri",
        targetfrag="normpleth",
        namesuffix="normaligned",
        activation=activation,
        encoding_dim=encoding_dim,
        num_filters=num_filters,
        kernel_size=kernel_size,
        debug=debug,
    )
elif nettype == "denseautoencoder":
    thefilter = tide_dlfilter.DenseAutoencoderDLFilter(
        num_pretrain_epochs=num_pretrain_epochs,
        num_epochs=num_epochs,
        startskip=startskip,
        endskip=endskip,
        step=step,
        excludethresh=excludethresh,
        corrthresh=corrthresh,
        excludebysubject=excludebysubject,
        window_size=window_size,
        num_layers=num_layers,
        dropout_rate=dropout_rate,
        usebadpts=usebadpts,
        readlim=readlim,
        readskip=readskip,
        countlim=countlim,
        thedatadir=thedatadir,
        inputfrag="cardfromfmri",
        targetfrag="normpleth",
        namesuffix="normaligned",
        activation=activation,
        encoding_dim=encoding_dim,
        debug=debug,
    )
elif nettype == "lstm":
    num_layers = 2
    thefilter = tide_dlfilter.LSTMDLFilter(
        num_epochs=num_epochs,
        startskip=startskip,
        endskip=endskip,
        step=step,
        excludethresh=excludethresh,
        corrthresh=corrthresh,
        excludebysubject=excludebysubject,
        window_size=window_size,
        num_layers=num_layers,
        dropout_rate=dropout_rate,
        usebadpts=usebadpts,
        readlim=readlim,
        readskip=readskip,
        countlim=countlim,
        thedatadir=thedatadir,
        inputfrag="cardfromfmri",
        targetfrag="alignedpleth",
        num_units=num_units,
    )
elif nettype == "hybrid":
    num_layers = 10
    thefilter = tide_dlfilter.HybridDLFilter(
        num_epochs=num_epochs,
        startskip=startskip,
        endskip=endskip,
        step=step,
        excludethresh=excludethresh,
        corrthresh=corrthresh,
        excludebysubject=excludebysubject,
        window_size=window_size,
        num_layers=num_layers,
        dropout_rate=dropout_rate,
        usebadpts=usebadpts,
        readlim=readlim,
        readskip=readskip,
        countlim=countlim,
        thedatadir=thedatadir,
        inputfrag="cardfromfmri",
        targetfrag="alignedpleth",
        activation=activation,
        num_filters=num_filters,
        kernel_size=kernel_size,
        num_units=num_units,
        invert=invert,
    )
else:
    print(f"{nettype} is not a valid nettype!")

thefilter.initialize()
thefilter.loaddata()
thefilter.train()
thefilter.evaluate()
