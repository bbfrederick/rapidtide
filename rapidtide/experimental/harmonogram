#!/usr/bin/env python
#
#   Copyright 2018 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
# $Author: frederic $
#       $Date: 2016/07/11 14:50:43 $
#       $Id: showtc,v 1.16 2016/07/11 14:50:43 frederic Exp $
#
from __future__ import print_function
import sys
import os
import getopt
import matplotlib.cm as cm
import rapidtide.io as tide_io
import rapidtide.filter as tide_filt
import rapidtide.fit as tide_fit
import rapidtide.miscmath as tide_math
import numpy as np
from scipy import arange, fftpack
from scipy.interpolate import interp1d
from scipy.signal import decimate

from matplotlib.pyplot import figure, show, savefig, setp, imshow

def makedivisible(number, highestfac, debug=False):
    notdivisible = True
    while notdivisible:
        notdivisible = False
        for i in range(highestfac, 1, -1):
            remainder = number % i
            if remainder != 0:
                notdivisible = True
                number += i - remainder
                if debug:
                    print('not divisible by', i, ', rounding up to', number)
    if debug:
        print(number, 'is divisible by all factors')
    return number


def undecimate(inputarray, factor, outlen):
    inlen = inputarray.shape[0]
    outputarray = np.zeros(outlen, dtype=np.float64)
    weights = outputarray * 0.0
    centerloc = int(outlen // 2)
    resampwidth = inlen * (factor + 1)
    xin = np.linspace(-1.0, 1.0, num=inlen, endpoint=True)
    xout = np.linspace(-1.0, 1.0, num=inlen * (factor + 1), endpoint=True)
    f = interp1d(xin, inputarray, kind='cubic')
    outputarray[centerloc - int(resampwidth // 2):centerloc + int(resampwidth // 2)] = f(xout)
    weights[centerloc - int(resampwidth // 2):centerloc + int(resampwidth // 2)] = 1.0
    return outputarray, weights


def decimateandselect(inputarray, factor, outlen):
    dsarray = decimate(inputarray, factor + 1)
    centerloc = int(len(dsarray) // 2)
    return dsarray[centerloc - int(outlen // 2):centerloc + int(outlen // 2)]


def harmonogram(input, Fs, reverse=False, n=5, log=False, numorders=3, useHamming=True, type='full', debug=False):
    if reverse:
        n = input.shape[0]
        outlen = input.shape[1] * n
        destarray = np.zeros((input.shape[0], outlen), dtype=np.float64)
        weights = 0.0 * destarray[0, :]
        freqaxis = np.linspace(0.0, Fs, outlen, endpoint=False)
        fig = figure()
        axlist = []
        for i in range(n):
            magspec, inweights = undecimate(input[i, :, 0], i, outlen)
            magspec = fftpack.ifftshift(magspec)
            weights = fftpack.ifftshift(inweights)
            phasespec, dummy = undecimate(np.unwrap(input[i, :, 0]), i, outlen)
            phasespec = fftpack.ifftshift(tide_math.phasemod(phasespec))


            #magspec = fftpack.ifftshift(undecimate(input[i, :, 0], i, outlen))
            #phasespec = fftpack.ifftshift(tide_math.phasemod(undecimate(np.unwrap(input[i, :, 0]), i, outlen)))
            #magspec = undecimate(input[i, :, 0], i, outlen)
            #phasespec = tide_math.phasemod(undecimate(np.unwrap(input[i, :, 0]), i, outlen))
            destarray[i, :] = fftpack.ifft(np.square(magspec) * (np.cos(phasespec) + np.sin(phasespec) * 1j)).real * np.sqrt(len(destarray))
            axlist.append(fig.add_subplot(n, 1, i + 1))
            #axlist[-1].plot(destarray[i, :])
            #axlist[-1].plot(60.0 * (freqaxis - freqaxis[int(outlen // 2)]), magspec)
            axlist[-1].plot(60.0 * freqaxis, magspec)
        show()
        return np.mean(destarray[1:,:], axis=0) / weights
    else:
        if useHamming:
            freqaxis, spectrum = tide_filt.spectrum(tide_filt.hamming(len(input)) * input,
                                                    Fs=Fs,
                                                    mode='complex',
                                                    trim=False)
        else:
            freqaxis, spectrum = tide_filt.spectrum(input,
                                                    Fs = thissamplerate,
                                                    mode='complex',
                                                    trim=False)
        spectrum = fftpack.fftshift(spectrum)
        centerloc = int(len(spectrum) // 2)
        freqaxis = freqaxis - freqaxis[centerloc]
        magspec = np.sqrt(np.absolute(spectrum)) # / np.sqrt(len(spectrum))
        phasespec = np.angle(spectrum)
        fig = figure()
        magax = fig.add_subplot(2, 1, 1)
        magax.plot(freqaxis, magspec)
        phaseax = fig.add_subplot(2, 1, 2)
        phaseax.plot(freqaxis, phasespec)
        show()

        if log:
            magspec = np.log(magspec / np.max(magspec))
            np.where(np.isnan(magspec), -999.0, magspec)
            np.where(spectrum >= -numorders, magspec, -numorders)

        dsmagarray = decimate(spectrum, n)
        outlen = len(dsmagarray)

        destarray = np.zeros((n, int(len(magspec) // n), 2), dtype=float)
        #destarray[0, :, 0] = decimateandselect(magspec, 0, outlen)
        #destarray[0, :, 1] = tide_math.phasemod(decimateandselect(np.unwrap(phasespec), 0, outlen))
        destfreqaxis = freqaxis[centerloc - int(outlen // 2):centerloc + int(outlen // 2)]

        fig = figure()
        axlist = []
        for i in range(n):
            destarray[i, :, 0] = decimateandselect(magspec, i, outlen)
            destarray[i, :, 1] = tide_math.phasemod(decimateandselect(np.unwrap(phasespec), i, outlen))
            axlist.append(fig.add_subplot(n, 1, i + 1))
            axlist[-1].plot(60.0 * destfreqaxis, destarray[i, :, 0])
        show()
        return destfreqaxis, destarray

def phase(mcv):
    return np.arctan2(mcv.imag, mcv.real)


def usage():
    print("harmonogram - test the harmogram transform on a timeseries in a text file")
    print("")
    print(
        "usage: harmonogram textfilename")
    print("")
    print("required arguments:")
    print("    textfilename	- a text file containing whitespace separated timecourses, one timepoint per line")
    print(
        "                       A list of comma separated numbers following the filename and preceded by a colon is used to select columns to plot")
    print("")
    print("optional arguments:")
    print("    --transpose              - swap rows and columns in the input files")
    print("    --samplerate=Fs          - the sample rate of the input data is Fs Hz (default is 1Hz)")
    print(
        "    --sampletime=Ts          - the sample time (1/samplerate) of the input data is Ts seconds (default is 1s)")
    print("    --linewidth=LW           - set linewidth to LW points (default is 1)")
    print("    --fontscalefac=FAC       - scale all font sizes by FAC (default is 1.0)")
    print("    --tofile=FILENAME        - write figure to file FILENAME instead of displaying on the screen")
    print("    --saveres=DPI            - write figure to file at DPI dots per inch (default is 1000)")
    print("    --title=TITLE            - use TITLE as the overall title of the graph")
    print("    --separate               - use a separate subplot for each timecourse")
    print("    --separatelinked         - use a separate subplot for each timecourse, but use a common y scaling")
    print("    --starttime=START        - start plot at START seconds")
    print("    --endtime=END            - end plot at END seconds")
    print("    --debug                  - print debugging information")
    return ()


# set default variable values
debug = False
dolegend = True
dotranspose = False
dowaterfall = False
detrendorder = 1
demean = False
useHamming = True
specmode = 'power'
samplerate = 1.0
voffset = 0.0
colornames = []
outputfile = None
thetitle = None
legendset = False
legendlist = []
separate = False
linky = True
thelinewidth = 1.0
showxax = True
showyax = True
thestartpoint = 0
theendpoint = 100000000
thestarttime = -1000000.0
theendtime = 1000000.0
fontscalefac = 1.0
legendloc = 2
saveres = 1000

# get the command line parameters
try:
    opts, args = getopt.gnu_getopt(sys.argv, "F",
                                   ["help", "nolegend", "transpose", "waterfall", "voffset=", "noxax",
                                    "noyax",
                                    "nowindow",
                                    "debug",
                                    "fontscalefac=",
                                    "legendloc=",
                                    "starttime=", "endtime=",
                                    "samplerate=", "colorlist=", "linewidth=", "legendlist=", "title=",
                                    "separatelinked", "separate", "sampletime=", "tofile=", "saveres="])
except getopt.GetoptError as err:
    # print help information and exit:
    print(str(err))  # will print something like 'option -a not recognized'
    usage()
    sys.exit(2)

# check for filename arguments
nargs = len(args)
if nargs < 2:
    usage()
    sys.exit(1)

# now parse options
for o, a in opts:
    linkchar = ' '
    if o == "--nolegend":
        dolegend = False
        print('turning off legend label')
    elif o == '--debug':
        debug = True
        print('turning debuggin on')
    elif o == '--nowindow':
        useHamming = False
        print('turning window off')
    elif o == '--separate':
        separate = True
        linky = False
        print('put each plot in a separate window')
    elif o == '--separatelinked':
        separate = True
        linky = True
        print('put each plot in a separate window, with the same y scale')
    elif o == '--saveres':
        saveres = int(a)
        print('Writing output to file at', saveres, 'dpi')
    elif o == '--tofile':
        outputfile = a
        print('Writing output to file', outputfile)
    elif o == '--legendlist':
        legendset = True
        for thislegend in a.split(','):
            legendlist.append(thislegend)
        print('Colors used:', colornames)
    elif o == '--fontscalefac':
        fontscalefac = float(a)
        print('Font scaling factor set to:', fontscalefac)
    elif o == '--legendloc':
        legendloc = int(a)
        if 0 <= legendloc <= 10:
            print('Legend location set to:', legendloc)
        else:
            print(legendloc, 'is not a valid legend location - exiting')
            sys.exit()
    elif o == '--starttime':
        thestarttime = float(a)
        print('Start time set to:', thestarttime)
    elif o == '--endtime':
        theendtime = float(a)
        print('End time set to:', theendtime)
    elif o == '--linewidth':
        thelinewidth = float(a)
        print('Linewidth set to:', thelinewidth)
    elif o == '--colorlist':
        for thiscolor in a.split(','):
            colornames.append(thiscolor)
        print('Colors used:', colornames)
    elif o == '--noyax':
        showyax = False
        print('will not show y axis')
    elif o == '--noxax':
        showxax = False
        print('will not show x axis')
    elif o == '--waterfall':
        dowaterfall = True
        print('making a waterfall plot')
    elif o == '--transpose':
        dotranspose = True
        print('transposing input data')
    elif o == '--samplerate':
        samplerate = float(a)
        linkchar = '='
        print('Samplerate set to ', samplerate)
    elif o == '--title':
        thetitle = a
        linkchar = '='
        print('Will use title', thetitle)
    elif o == '--voffset':
        voffset = float(a)
        linkchar = '='
        print('Vertical offset set to ', voffset)
    elif o == '--sampletime':
        samplerate = 1.0 / float(a)
        linkchar = '='
        print('Samplerate set to ', samplerate)
    elif o == '-F':
        print('got the -F option')
    elif o in ('-h', '--help'):
        usage()
        sys.exit()
    else:
        assert False, 'unhandled option'

# check range
if thestarttime >= theendtime:
    print('endtime must be greater then starttime;')
    sys.exit()

# handle required args first
textfilename = []
xvecs = []
yvecs = []
linelabels = []
samplerates = []
numfiles = 1
numvecs = 0
textfilename.append(args[1].split(':'))
if nargs > 2:
    for i in range(2, nargs):
        numfiles += 1
        textfilename.append(args[i].split(':'))

numharmonics = 3
minlen = 100000000
shortcolnames = True
# read in all the data
for i in range(0, numfiles):
    print('filename ', i, textfilename[i])

    # check file type
    filebase, extension = os.path.splitext(textfilename[i][0])
    if extension == '.json':
        thissamplerate, thisstartoffset, colnames, invecs = tide_io.readbidstsv(textfilename[i][0])
    else:
        invecs = tide_io.readvecs(textfilename[i][0])
        thissamplerate = samplerate
        thisstartoffset = 0.0
        colnames = None
    if dotranspose:
        invecs = np.transpose(invecs)
    if debug:
        print('   ', invecs.shape[0], ' columns')
    if len(textfilename[i]) == 2:
        collist = []
        for column in (textfilename[i][1]).split(','):
            collist.append(int(column))
    else:
        collist = range(0, invecs.shape[0])
        # for j in range(0, invecs.shape[0]):
    for j in collist:
        if debug:
            print('appending vector number ', j)
        yvecs.append(invecs[j] * 1.0)
        xvecs.append(thisstartoffset + arange(0.0, len(yvecs[-1]), 1.0) / thissamplerate)
        if len(yvecs[-1]) < minlen:
            minlen = len(yvecs[-1])
        if not legendset:
            if invecs.shape[0] > 1:
                if colnames is None:
                    if shortcolnames:
                        linelabels.append('column' + str(j).zfill(2))
                    else:
                        linelabels.append(textfilename[i][0] + '_column' + str(j).zfill(2))

                else:
                    if shortcolnames:
                        linelabels.append(colnames[j])
                    else:
                        linelabels.append(textfilename[i][0] + '_' + colnames[j])
            else:
                linelabels.append(textfilename[i][0])
        else:
            if invecs.shape[0] > 1:
                linelabels.append(legendlist[i % len(legendlist)] + '_column' + str(j).zfill(2))
            else:
                linelabels.append(legendlist[i % len(legendlist)])
        samplerates.append(thissamplerate + 0.0)
        numvecs += 1

log = False

for i in range(0, numvecs):
    # check to make sure that the length is correct for the number of harmonics
    newlength = makedivisible(len(yvecs[i]), numharmonics + 1)
    print('original length, new length:', len(yvecs[i]), newlength)
    inputvec = np.zeros((newlength), dtype=float)
    inputvec[0:len(yvecs[i])] = yvecs[i]
    freqaxis, theharm = harmonogram(inputvec, samplerates[i], n=(numharmonics + 1), log=log, useHamming=useHamming)
    freqaxis *= 60.0
    fig = figure()
    ax = fig.add_subplot(3, 1, 1)
    ax.imshow(theharm[:, :, 0], aspect='auto', extent=[freqaxis[0], freqaxis[-1], numharmonics + 1, 0])
    ax2 = fig.add_subplot(3, 1, 2)
    ax2.imshow(theharm[:, :, 1], aspect='auto', extent=[freqaxis[0], freqaxis[-1], numharmonics + 1, 0])

    prod = theharm[0, :, 0]
    for j in range(1, numharmonics + 1):
        prod *= theharm[j, :, 0]
    prod = np.power(prod, 1.0 / (numharmonics + 1))
    ax3 = fig.add_subplot(3, 1, 3)
    ax3.plot(freqaxis, prod)
    show()

    regenspec = harmonogram(theharm, samplerates[i], reverse=True, n=(numharmonics + 1), log=log, useHamming=useHamming, debug=True)
    fig = figure()
    axinit = fig.add_subplot(2, 1, 1)
    axinit.plot(yvecs[i])
    axfinal = fig.add_subplot(2, 1, 2)
    axfinal.plot(regenspec)
    show()
