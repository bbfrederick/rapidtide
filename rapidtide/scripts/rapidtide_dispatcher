#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2016-2021 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
import os
import subprocess
import sys
import requests


def in_aws_batch():
    return (os.getenv("AWS_EXECUTION_ENV") == "AWS_ECS_EC2") and (
        os.getenv("INPUT_BUCKET") is not None
    )


def in_ec2():
    url = "http://169.254.169.254/latest/dynamic/instance-identity/document"
    try:
        r = requests.get(url, timeout=0.5)
        return "availabilityZone" in r.json()
    except:
        return False


def note_participant_from_array():
    array_file = os.getenv("PARTICIPANT_ARRAY_FILE")
    line = int(os.getenv("AWS_BATCH_JOB_ARRAY_INDEX"))
    participant = open(array_file).read().splitlines()[line]
    open("/participant_from_array", "w").write(participant)
    print(f"Set participant to {participant}.")


def show_instance_type():
    url = "http://169.254.169.254/latest/meta-data/instance-type"
    try:
        r = requests.get(url, timeout=0.5)
        print(f"Instance type: {r.text}")
    except:
        print("Failed to fetch instance type.")


def mount_s3fs():
    if in_aws_batch():
        auth_method = ["-o", "ecs"]
    elif in_ec2():
        auth_method = ["-o", "iam_role"]
    else:
        raise RuntimeError("INPUT_BUCKET envvar exists, but I can't figure out where I'm running.")

    subprocess.call(["s3fs", *auth_method, os.environ["OUTPUT_BUCKET"], "/data_out"])

    ibs = "/tmp/input_bucket_secret"
    open(ibs, "w").write(os.environ["INPUT_BUCKET_SECRET"])
    os.chmod(ibs, 0o400)
    subprocess.call(["s3fs", "-o", f"passwd_file={ibs}", os.environ["INPUT_BUCKET"], "/data_in"])

    with open("/proc/mounts", "r") as f:
        mounts = [line.split()[1] for line in f.readlines() if line.split()[2] == "fuse.s3fs"]
    for mount in ["/data_in", "/data_out"]:
        if mount not in mounts:
            raise RuntimeError(f"{mount} is not correctly mounted.")


def main():
    # get the command line parameters
    if os.getenv("IS_DOCKER_8395080871") is not None:
        isdocker = True
    else:
        isdocker = False

    if os.getenv("INPUT_BUCKET"):
        # We are in CLOUD MODE; we will try to mount /data_{in,out} via s3fs
        show_instance_type()
        mount_s3fs()

        if os.getenv("AWS_BATCH_JOB_ARRAY_INDEX"):
            # array mode
            note_participant_from_array()

    validcommands = [
        "aligntcs",
        "applydlfilter",
        "atlasaverage",
        "atlastool",
        "ccorrica",
        "endtidalproc",
        "filtnifti",
        "filttc",
        "fingerprint",
        "glmfilt",
        "happy",
        "happy2std",
        "happy_legacy",
        "happywarp",
        "histnifti",
        "histtc",
        "physiofreq",
        "pixelcomp",
        "plethquality",
        "polyfitim",
        "rapidtide",
        "rapidtide2std",
        "rapidtide2x_legacy",
        "rapidtide_dispatcher",
        "resamp1tc",
        "resamplenifti",
        "showarbcorr",
        "showhist",
        "showstxcorr",
        "showtc",
        "showxcorr_legacy",
        "showxcorrx",
        "showxy",
        "simdata",
        "spatialdecomp",
        "spatialfit",
        "spectrogram",
        "statlasgen",
        "synthASL",
        "tcfrom3col",
        "temporaldecomp",
        "testhrv",
        "threeD",
        "tidepool",
        "xyzzy",
        "xyzzz",
        "info",
    ]

    execdir = sys.path[0]
    thecommand = sys.argv[1:]
    if thecommand[0] in validcommands:
        # the script exists, now check if it is installed
        if os.path.isfile(os.path.join(execdir, thecommand[0])):
            subprocess.call(thecommand)
        elif thecommand[0] == "xyzzy":
            print("command xyzzy given, launching shell...")
            subprocess.call("/bin/bash")
        elif thecommand[0] == "xyzzz":
            print("command xyzzz given, executing copy...")
            subprocess.call("/bin/cp" + sys.argv[2:])
        elif thecommand[0] == "info":
            print(f"isdocker: {isdocker}")
            print(f"execdir: {execdir}")
            print(f"cwd: {os.getcwd()}")
            with open("/src/rapidtide/VERSION", "r") as f:
                theversion = f.read().replace("\n", "")
            print(f"version: {theversion}")
            print("valid commands:")
            for thecommand in validcommands:
                print(f"\t{thecommand}")
        else:
            print(thecommand[0], "is a rapidtide script, but is not installed")
    else:
        print(thecommand[0], "is not a script in the rapidtide package")


if __name__ == "__main__":
    main()
