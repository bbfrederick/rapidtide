#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#   Copyright 2016-2024 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
import argparse
import copy

import numpy as np

import rapidtide.filter as tide_filt
import rapidtide.io as tide_io


def main():
    # set default variable values
    displayplots = False

    # get the command line parameters
    parser = argparse.ArgumentParser(
        prog="localflow",
        description="Calculate local sources of signal.",
        allow_abbrev=False,
    )
    parser.add_argument("inputfilename", type=str, help="The name of the input nifti file.")
    parser.add_argument("outputroot", type=str, help="The root name of the output nifti files.")

    parser.add_argument(
        "--debug",
        dest="debug",
        action="store_true",
        help="Turn on debugging information.",
        default=False,
    )

    """parser.add_argument(
        "lowestfreq",
        type=float,
        help="The low passband frequency limit in Hz (set less than zero to disable HPF).",
    )
    parser.add_argument(
        "highestfreq",
        type=float,
        help="The high passband frequency limit in Hz (set less than zero to disable LPF)",
    )"""

    # get the command line parameters
    try:
        args = parser.parse_args()
    except SystemExit:
        parser.print_help()
        raise

    # get the input TR
    inputtr_fromfile, numinputtrs = tide_io.fmritimeinfo(args.inputfilename)
    print("input data: ", numinputtrs, " timepoints, tr = ", inputtr_fromfile)

    input_img, input_data, input_hdr, thedims, thesizes = tide_io.readfromnifti(args.inputfilename)
    if input_hdr.get_xyzt_units()[1] == "msec":
        tr = thesizes[4] / 1000.0
    else:
        tr = thesizes[4]
    Fs = 1.0 / tr
    print("tr from header =", tr, ", sample frequency is ", Fs)

    numtimesteps= 2
    numspacesteps = 2
    numspacerange = 2 * numspacesteps + 1
    chunksize = numspacerange * numspacerange * numspacerange
    xsize, ysize, numslices, timepoints = tide_io.parseniftidims(thedims)
    xdim, ydim, slicethickness, tr = tide_io.parseniftisizes(thesizes)
    coefficients = np.zeros((xsize - 2 * numspacesteps,ysize - 2 * numspacesteps, numslices - 2 * numspacesteps, numspacerange * numspacerange * numspacerange, numtimesteps), dtype="float32")
    backwarddiffs = np.zeros((xsize - 2, ysize - 2, numslices - 2, 3, 3, 3), dtype="float32")
    velocities = np.zeros((xsize, ysize, numslices, timepoints, 3), dtype="float32")
    averagevelocity = np.zeros((xsize, ysize, numslices, 3), dtype="float32")

    # cycle over all timepoints
    print("now cycling over all timepoints")

    evlist = range(chunksize).remove(chunksize // 2 + 1)
    print(evlist)

    for timestep in range(1, numtimesteps+1):
        for z in range(numspacesteps, numslices -  numspacesteps):
            for y in range(numspacesteps, ysize - numspacesteps):
                for x in range(numspacesteps, xsize - numspacesteps):
                    target = input_data[x, y, z, timestep:]
                    chunk = input_data[x-numspacesteps:x+numspacesteps+1, y-numspacesteps:y+numspacesteps+1, z-numspacesteps:z+numspacesteps+1, :-timestep]
                    reshapedchunk = (chunk.reshape((chunksize, timepoints - timestep)))[evlist, :]
                    print(reshapedchunk.shape)



        """# now do the ones with other numbers of time points
        output_hdr = copy.deepcopy(input_hdr)
        output_hdr.set_intent(2003)
        output_hdr["dim"][0] = 4
        output_hdr["dim"][4] = 3
        output_hdr["dim"][5] = 1
        output_hdr.datatype = 16
        if args.debug:
            print(f"{velocities.dtype=}")
        tide_io.savetonifti(
            velocities[:, :, :, timepoint, :].reshape((xsize, ysize, numslices, 3)),
            output_hdr,
            f"{args.outputroot}_{str(timepoint).zfill(2)}",
            debug=args.debug,
        )
        averagevelocity += velocities[:, :, :, timepoint, :].reshape((xsize, ysize, numslices, 3))
    tide_io.savetonifti(
        averagevelocity[:, :, :, :] / timepoints,
        output_hdr,
        f"{args.outputroot}_average",
        debug=args.debug,
    )"""


if __name__ == "__main__":
    main()
