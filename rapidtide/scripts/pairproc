#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2016-2021 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
import argparse

import numpy as np

import rapidtide.io as tide_io
import rapidtide.resample as tide_resample


def main():
    parser = argparse.ArgumentParser(
        prog="pairproc",
        description="Compare the even and odd volumes of a 4D nifti file.",
        usage="%(prog)s inputfile outputroot",
    )

    parser.add_argument("inputfile", help="The name of the input nifti file, including extension")
    parser.add_argument(
        "outputroot", help="The base name of the output files"
    )
    parser.add_argument(
        "--debug", action="store_true", help="Print debugging information", default=False,
    )

    args = parser.parse_args()

    # read in the data files
    print("reading input file")
    input_img, input_data, input_hdr, thedims, thesizes = tide_io.readfromnifti(args.inputfile)
    xsize, ysize, numslices, timepoints = tide_io.parseniftidims(thedims)
    print(f"inputshape: {input_data.shape}")
    if timepoints % 2 != 0:
        raise ValueError("pairproc requires an even number of points in the time dimension")

    # make the output array
    evenims = input_data[:, :, :, 0: timepoints : 2]
    oddims =  input_data[:, :, :, 1: timepoints + 1: 2]
    print(f"evenshape: {evenims.shape}")
    print(f"oddshape: {oddims.shape}")
    sys.exit()

    # cycle over all voxels
    print("now cycling over all voxels")
    for zloc in range(0, numslices):
        print("processing slice ", zloc)
        for yloc in range(0, ysize):
            for xloc in range(0, xsize):
                resampledtcs[xloc, yloc, zloc, :] = tide_resample.doresample(
                    input_x, input_data[xloc, yloc, zloc, :], output_x, antialias=args.antialias,
                )

    # now do the ones with other numbers of time points
    resampled_hdr = input_hdr.copy()
    resampled_hdr["pixdim"][4] = args.outputtr
    outputroot, dummy = tide_io.niftisplitext(args.outputfile)
    tide_io.savetonifti(resampledtcs, resampled_hdr, outputroot)


if __name__ == "__main__":
    main()
